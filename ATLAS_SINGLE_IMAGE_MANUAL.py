#!/usr/bin/env python3
"""
Atlas NPU 单张图片推理 - 使用手册

=============================================================================
🚀 ATLAS NPU 单张图片车道线分割推理工具
=============================================================================

功能特性：
✅ 支持Atlas NPU的.om模型推理 (FP16高性能)
✅ 输入/输出尺寸：640×360（与摄像头脚本完全一致）
✅ 极简预处理：BGR→RGB + Float16 + CHW，性能最优
✅ 极简后处理：直接argmax + 可视化
✅ 可输出分割掩码或可视化结果
✅ 详细的性能分析报告

=============================================================================
📋 系统要求
=============================================================================

1. Atlas开发环境：
   - Atlas 200/300/800系列硬件
   - CANN开发套件 (版本5.0+)
   - ais_bench推理库

2. Python依赖：
   - opencv-python
   - numpy
   - ais_bench

3. 模型文件：
   - fast_scnn_custom_e2e_360x640_fp16_fixed_simp.om (FP16格式)

=============================================================================
🛠️ 安装步骤
=============================================================================

1. 安装Atlas CANN开发套件
2. 安装Python依赖：
   pip install opencv-python numpy ais_bench

3. 确保模型文件存在：
   ./weights/fast_scnn_custom_e2e_360x640_fp16_fixed_simp.om

=============================================================================
📱 使用方法
=============================================================================

基础用法：
>>> python atlas_single_image_inference.py --input test_image.jpg

完整参数：
>>> python atlas_single_image_inference.py \
    --input test_image.jpg \
    --output result_vis.jpg \
    --save_mask mask_output.png \
    --model ./weights/fast_scnn_custom_e2e_360x640_fp16_fixed_simp.om \
    --device 0

参数说明：
--input, -i    : 输入图片路径 (必需)
--output, -o   : 输出可视化图片路径 (可选)
--save_mask    : 保存分割掩码路径 (可选)
--model, -m    : Atlas模型(.om)路径 (默认: ./weights/fast_scnn_custom_e2e_360x640_fp16_fixed_simp.om)
--device, -d   : NPU设备ID (默认: 0)
--no_vis       : 不保存可视化结果，仅推理 (可选)

=============================================================================
📊 使用示例
=============================================================================

示例1: 基础推理 (自动生成输出文件名)
>>> python atlas_single_image_inference.py --input lane_image.jpg
输出文件: lane_image_result.jpg

示例2: 指定输出路径
>>> python atlas_single_image_inference.py \
    --input lane_image.jpg \
    --output my_result.jpg

示例3: 同时保存可视化结果和分割掩码
>>> python atlas_single_image_inference.py \
    --input lane_image.jpg \
    --output result.jpg \
    --save_mask mask.png

示例4: 仅推理不保存可视化 (最快)
>>> python atlas_single_image_inference.py \
    --input lane_image.jpg \
    --no_vis

示例5: 使用指定NPU设备
>>> python atlas_single_image_inference.py \
    --input lane_image.jpg \
    --device 1

=============================================================================
🔧 与摄像头脚本的一致性
=============================================================================

本脚本与 kuruma/lane_dashboard_e2e.py 的推理流程完全一致：

1. 预处理流程：
   ✅ 相同的resize策略（640×360）
   ✅ 相同的颜色空间转换（BGR→RGB）
   ✅ 相同的数据类型（Float16）
   ✅ 相同的张量格式（NCHW）

2. NPU推理：
   ✅ 相同的InferSession接口
   ✅ 相同的模型文件格式(.om)
   ✅ 相同的设备调用方式

3. 后处理流程：
   ✅ 相同的argmax操作
   ✅ 相同的可视化生成
   ✅ 相同的resize回原尺寸

4. 性能特性：
   ✅ 相同的FP16精度
   ✅ 相同的内存布局
   ✅ 相同的计算复杂度

=============================================================================
📈 性能分析输出示例
=============================================================================

推理完成后会显示详细的性能报告：

============================================================
🚀 Atlas NPU 单张图片推理性能分析
============================================================
🧠 模型: fast_scnn_custom_e2e_360x640_fp16_fixed_simp.om
📏 输入尺寸: 640×360 (W×H)
🎯 数据类型: FLOAT16
------------------------------------------------------------
⏱️  图片加载    :    2.1ms ( 15.2%)
⏱️  模型加载    :    8.5ms ( 61.2%)
⏱️  CPU预处理   :    1.8ms ( 13.0%)
⏱️  NPU推理     :    0.9ms (  6.5%)
⏱️  CPU后处理   :    0.4ms (  2.9%)
⏱️  结果保存    :    0.2ms (  1.4%)
------------------------------------------------------------
🏁 总耗时: 13.9ms
⚡ 理论FPS: 71.9
============================================================

📈 检测结果统计:
🛣️  车道线像素: 45,231 / 230,400 (19.63%)

=============================================================================
🐛 故障排除
=============================================================================

1. 模块导入错误：
   错误: ImportError: No module named 'ais_bench'
   解决: pip install ais_bench

2. 模型文件不存在：
   错误: FileNotFoundError: 模型文件不存在
   解决: 检查模型路径，确保.om文件存在

3. NPU设备错误：
   错误: Device not found
   解决: 检查NPU设备状态: npu-smi info

4. 内存不足：
   错误: Out of memory
   解决: 检查NPU内存使用: npu-smi info

5. 图片格式不支持：
   错误: 无法读取图片
   解决: 确保图片格式为jpg/png/bmp等OpenCV支持格式

=============================================================================
🔍 文件结构
=============================================================================

项目文件结构：
atlas_single_image_inference.py  # 主推理脚本
weights/
├── fast_scnn_custom_e2e_360x640_fp16_fixed_simp.om  # Atlas模型
└── ...

推理结果文件：
input_image.jpg           # 原始输入
input_image_result.jpg    # 可视化结果 (绿色覆盖)
input_image_mask.png      # 分割掩码 (黑白)

=============================================================================
💡 最佳实践建议
=============================================================================

1. 输入图片预处理：
   - 推荐使用640×360尺寸的图片以获得最佳性能
   - 支持任意尺寸输入，会自动resize

2. 性能优化：
   - 使用FP16模型获得最佳推理速度
   - 如只需要掩码结果，使用--no_vis参数

3. 批量处理：
   - 对于大量图片，建议编写批处理脚本
   - 模型只需加载一次，可复用InferSession对象

4. 内存管理：
   - 大图片处理时注意NPU内存使用
   - 必要时可以分patch处理

=============================================================================
📞 技术支持
=============================================================================

如遇到问题，请检查：
1. Atlas硬件和驱动是否正常
2. CANN开发环境是否正确安装
3. 模型文件是否为正确的FP16格式
4. Python依赖是否完整安装

更多技术细节请参考：
- kuruma/lane_dashboard_e2e.py (摄像头推理脚本)
- compare_pytorch_onnx.py (推理对比脚本)
- export_onnx_fixed.py (模型导出脚本)

=============================================================================
"""

if __name__ == "__main__":
    print(__doc__)
